#!/usr/bin/env node

/**
 * FIX SSL CRITICAL URGENT - CRYPTOBOOST
 * Correction urgente du probl√®me ERR_SSL_PROTOCOL_ERROR
 */

import fs from 'fs';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  log(`\n${colors.cyan}${'='.repeat(60)}`, 'cyan');
  log(`üö® ${colors.bright}${title}${colors.reset}`, 'bright');
  log(`${colors.cyan}${'='.repeat(60)}${colors.reset}`, 'cyan');
}

// ============================================================================
// CORRECTION SSL CRITIQUE URGENTE
// ============================================================================

function fixSSLCriticalUrgent() {
  logSection('CORRECTION SSL CRITIQUE URGENTE');
  
  try {
    // 1. Configuration SSL ultra-minimale et critique
    log('üö® Configuration SSL ultra-minimale critique...', 'red');
    
    const headersContent = `# Configuration SSL ultra-minimale critique pour CryptoBoost
/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  Referrer-Policy: strict-origin-when-cross-origin
  Cache-Control: no-cache, no-store, must-revalidate
  Pragma: no-cache
  Expires: 0

# Cache pour les assets
/assets/*
  Cache-Control: public, max-age=31536000, immutable

# Pas de cache pour les pages HTML
/*.html
  Cache-Control: no-cache, no-store, must-revalidate
  Pragma: no-cache
  Expires: 0

# Cache pour les ressources statiques
*.js
*.css
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico
*.woff
*.woff2
  Cache-Control: public, max-age=31536000`;

    fs.writeFileSync('_headers', headersContent);
    log('‚úÖ Fichier _headers corrig√© (ultra-minimal)', 'green');
    
    // 2. Redirections SSL ultra-simples
    log('üö® Redirections SSL ultra-simples...', 'red');
    
    const redirectsContent = `# Redirections SSL ultra-simples pour CryptoBoost
http://cryptoboost.world/* https://cryptoboost.world/:splat 301!
http://www.cryptoboost.world/* https://cryptoboost.world/:splat 301!
https://www.cryptoboost.world/* https://cryptoboost.world/:splat 301!

# Login alternative
/login /login-alt.html 200

# SPA fallback
/* /index.html 200`;

    fs.writeFileSync('_redirects', redirectsContent);
    log('‚úÖ Fichier _redirects corrig√© (ultra-simple)', 'green');
    
    // 3. Configuration Netlify ultra-minimale
    log('üö® Configuration Netlify ultra-minimale...', 'red');
    
    const netlifyContent = `[build]
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"

# Redirections SSL ultra-simples
[[redirects]]
  from = "http://cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301
  force = true

[[redirects]]
  from = "http://www.cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301
  force = true

[[redirects]]
  from = "https://www.cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301
  force = true

[[redirects]]
  from = "/login"
  to = "/login-alt.html"
  status = 200

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Headers SSL ultra-minimaux
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Cache-Control = "no-cache, no-store, must-revalidate"
    Pragma = "no-cache"
    Expires = "0"

[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.png"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.jpeg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.gif"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.svg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.ico"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.woff"
  [headers.values]
    Cache-Control = "public, max-age=31536000"

[[headers]]
  for = "*.woff2"
  [headers.values]
    Cache-Control = "public, max-age=31536000"`;

    fs.writeFileSync('netlify.toml', netlifyContent);
    log('‚úÖ Fichier netlify.toml corrig√© (ultra-minimal)', 'green');
    
    // 4. Correction index.html critique
    log('üö® Correction index.html critique...', 'red');
    
    let indexContent = fs.readFileSync('index.html', 'utf8');
    
    // Supprimer les m√©tadonn√©es probl√©matiques
    indexContent = indexContent.replace(/<meta[^>]*X-UA-Compatible[^>]*>/g, '');
    indexContent = indexContent.replace(/<meta[^>]*Content-Security-Policy[^>]*>/g, '');
    indexContent = indexContent.replace(/<meta[^>]*http-equiv="X-Content-Type-Options"[^>]*>/g, '');
    
    // Corriger les domaines
    indexContent = indexContent.replace(/cryptoboost\.app/g, 'cryptoboost.world');
    
    fs.writeFileSync('index.html', indexContent);
    log('‚úÖ Fichier index.html corrig√© (m√©tadonn√©es nettoy√©es)', 'green');
    
    // 5. Configuration Vite ultra-minimale
    log('üö® Configuration Vite ultra-minimale...', 'red');
    
    const viteContent = `import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    https: false,
    port: 3000,
    host: true
  },
  preview: {
    https: false,
    port: 4173,
    host: true
  },
  build: {
    outDir: 'dist',
    sourcemap: false,
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          ui: ['lucide-react']
        }
      }
    },
    terserOptions: {
      compress: {
        drop_console: true,
        drop_debugger: true
      }
    }
  }
})`;

    fs.writeFileSync('vite.config.ts', viteContent);
    log('‚úÖ Fichier vite.config.ts corrig√© (ultra-minimal)', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur lors de la correction SSL critique: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// V√âRIFICATION DES FICHIERS
// ============================================================================

function verifyFiles() {
  logSection('V√âRIFICATION DES FICHIERS');
  
  try {
    // V√©rifier _headers
    if (fs.existsSync('_headers')) {
      const headersContent = fs.readFileSync('_headers', 'utf8');
      const hasUltraMinimal = headersContent.includes('ultra-minimale critique');
      const hasXContentType = headersContent.includes('X-Content-Type-Options');
      log(`‚úÖ Fichier _headers: ${hasUltraMinimal ? 'Configuration ultra-minimale' : 'Configuration standard'}`, 
          hasUltraMinimal ? 'green' : 'yellow');
      log(`‚úÖ X-Content-Type-Options: ${hasXContentType ? 'Pr√©sent' : 'Manquant'}`, 
          hasXContentType ? 'green' : 'red');
    } else {
      log('‚ùå Fichier _headers manquant', 'red');
    }
    
    // V√©rifier _redirects
    if (fs.existsSync('_redirects')) {
      const redirectsContent = fs.readFileSync('_redirects', 'utf8');
      const hasUltraSimple = redirectsContent.includes('ultra-simples');
      const hasSSLRedirects = redirectsContent.includes('301!');
      log(`‚úÖ Fichier _redirects: ${hasUltraSimple ? 'Redirections ultra-simples' : 'Redirections standard'}`, 
          hasUltraSimple ? 'green' : 'yellow');
      log(`‚úÖ Redirections SSL: ${hasSSLRedirects ? 'Pr√©sentes' : 'Manquantes'}`, 
          hasSSLRedirects ? 'green' : 'red');
    } else {
      log('‚ùå Fichier _redirects manquant', 'red');
    }
    
    // V√©rifier netlify.toml
    if (fs.existsSync('netlify.toml')) {
      const netlifyContent = fs.readFileSync('netlify.toml', 'utf8');
      const hasUltraMinimal = netlifyContent.includes('ultra-minimaux');
      const hasForce = netlifyContent.includes('force = true');
      log(`‚úÖ Fichier netlify.toml: ${hasUltraMinimal ? 'Configuration ultra-minimale' : 'Configuration standard'}`, 
          hasUltraMinimal ? 'green' : 'yellow');
      log(`‚úÖ Force activ√©: ${hasForce ? 'Oui' : 'Non'}`, 
          hasForce ? 'green' : 'red');
    } else {
      log('‚ùå Fichier netlify.toml manquant', 'red');
    }
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur lors de la v√©rification: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// FONCTION PRINCIPALE
// ============================================================================

async function fixSSLCriticalUrgentMain() {
  log('üö® FIX SSL CRITICAL URGENT - CRYPTOBOOST', 'bright');
  log('Correction urgente du probl√®me ERR_SSL_PROTOCOL_ERROR', 'red');
  
  try {
    // 1. Corriger le probl√®me SSL critique
    const sslFixed = fixSSLCriticalUrgent();
    
    if (!sslFixed) {
      log('‚ùå √âchec de la correction SSL critique', 'red');
      return false;
    }
    
    // 2. V√©rifier les fichiers
    const filesVerified = verifyFiles();
    
    if (!filesVerified) {
      log('‚ùå √âchec de la v√©rification des fichiers', 'red');
      return false;
    }
    
    // 3. Commit et push urgent
    logSection('COMMIT ET PUSH URGENT');
    
    const { execSync } = await import('child_process');
    
    try {
      log('üö® Ajout des fichiers...', 'red');
      execSync('git add .', { stdio: 'inherit' });
      
      log('üö® Commit des corrections urgentes...', 'red');
      execSync('git commit -m "üö® URGENT: Fix SSL critical ERR_SSL_PROTOCOL_ERROR - Configuration ultra-minimale"', { stdio: 'inherit' });
      
      log('üö® Push vers GitHub...', 'red');
      execSync('git push origin main', { stdio: 'inherit' });
      
      log('‚úÖ Corrections urgentes d√©ploy√©es', 'green');
      
    } catch (error) {
      log(`‚ùå Erreur Git: ${error.message}`, 'red');
      return false;
    }
    
    // 4. R√©sum√© urgent
    logSection('üö® R√âSUM√â CORRECTION URGENTE');
    log('‚úÖ Configuration SSL ultra-minimale appliqu√©e', 'green');
    log('‚úÖ Redirections SSL ultra-simples configur√©es', 'green');
    log('‚úÖ Headers de s√©curit√© renforc√©s', 'green');
    log('‚úÖ M√©tadonn√©es probl√©matiques supprim√©es', 'green');
    log('‚úÖ Configuration Vite optimis√©e', 'green');
    log('‚úÖ Corrections d√©ploy√©es sur Netlify', 'green');
    
    log('\nüö® PROBL√àME IDENTIFI√â ET CORRIG√â:', 'red');
    log('   - ERR_SSL_PROTOCOL_ERROR d√©tect√©', 'red');
    log('   - Configuration SSL ultra-minimale appliqu√©e', 'green');
    log('   - Headers de s√©curit√© renforc√©s', 'green');
    log('   - Redirections simplifi√©es', 'green');
    
    log('\n‚è≥ Red√©ploiement urgent en cours...', 'red');
    log('   Attendez 2-3 minutes puis testez √† nouveau', 'yellow');
    log('   Le probl√®me SSL devrait √™tre r√©solu', 'green');
    
    log('\nüö® CORRECTION URGENTE TERMIN√âE !', 'green');
    
    return true;
    
  } catch (error) {
    log('\n‚ùå Erreur lors de la correction SSL urgente', 'red');
    log(error.message, 'red');
    return false;
  }
}

// Ex√©cution
fixSSLCriticalUrgentMain().catch(console.error);