#!/usr/bin/env node

/**
 * Script de test manuel - Interaction avec l'interface CryptoBoost
 * Test des fonctionnalit√©s r√©elles en simulant les actions utilisateur
 * Version : Test manuel complet
 */

import fetch from 'node-fetch';

// Configuration
const BASE_URL = 'https://cryptoboost.world';

// Couleurs pour la console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è ${message}`, 'blue');
}

function logWarning(message) {
  log(`‚ö†Ô∏è ${message}`, 'yellow');
}

function logHeader(message) {
  log(`\n${'='.repeat(60)}`, 'magenta');
  log(message, 'magenta');
  log(`${'='.repeat(60)}`, 'magenta');
}

// =====================================================
// 1. TEST DE LA PAGE D'ACCUEIL
// =====================================================

async function testHomePage() {
  logHeader('üè† TEST PAGE D\'ACCUEIL');
  
  try {
    const response = await fetch(BASE_URL);
    const content = await response.text();
    
    logInfo('Analyse de la page d\'accueil...');
    
    // V√©rifier les √©l√©ments essentiels
    const homeChecks = [
      { name: 'Titre CryptoBoost', found: content.includes('CryptoBoost') },
      { name: 'Navigation principale', found: content.includes('nav') || content.includes('menu') },
      { name: 'Section Hero', found: content.includes('hero') || content.includes('banner') },
      { name: 'Boutons de navigation', found: content.includes('Login') || content.includes('Register') },
      { name: 'Contenu principal', found: content.includes('main') || content.includes('content') },
      { name: 'Footer', found: content.includes('footer') },
      { name: 'Liens de navigation', found: content.includes('href') },
      { name: 'Images/Assets', found: content.includes('img') || content.includes('src') },
      { name: 'Styles CSS', found: content.includes('css') || content.includes('style') },
      { name: 'JavaScript', found: content.includes('script') || content.includes('js') }
    ];
    
    for (const check of homeChecks) {
      if (check.found) {
        logSuccess(`Accueil: ${check.name}`);
      } else {
        logError(`Accueil: ${check.name} manquant`);
      }
    }
    
    // V√©rifier les liens sp√©cifiques
    const specificLinks = [
      '/login', '/register', '/admin', '/client', '/about', '/contact'
    ];
    
    for (const link of specificLinks) {
      if (content.includes(link)) {
        logSuccess(`Accueil: Lien ${link} pr√©sent`);
      } else {
        logWarning(`Accueil: Lien ${link} non trouv√©`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test page d'accueil: ${error.message}`);
    return false;
  }
}

// =====================================================
// 2. TEST DE LA PAGE D'INSCRIPTION
// =====================================================

async function testRegistrationPage() {
  logHeader('üìù TEST PAGE D\'INSCRIPTION');
  
  try {
    const response = await fetch(`${BASE_URL}/register`);
    const content = await response.text();
    
    logInfo('Analyse de la page d\'inscription...');
    
    // V√©rifier les √©l√©ments du formulaire
    const registrationChecks = [
      { name: 'Page accessible', found: response.ok },
      { name: 'Formulaire d\'inscription', found: content.includes('form') },
      { name: 'Champ nom/pr√©nom', found: content.includes('name') || content.includes('first') || content.includes('last') },
      { name: 'Champ email', found: content.includes('email') },
      { name: 'Champ mot de passe', found: content.includes('password') },
      { name: 'Champ confirmation', found: content.includes('confirm') || content.includes('repeat') },
      { name: 'Bouton d\'inscription', found: content.includes('Register') || content.includes('Sign up') || content.includes('Inscription') },
      { name: 'Validation des champs', found: content.includes('required') || content.includes('validation') },
      { name: 'Conditions d\'utilisation', found: content.includes('terms') || content.includes('conditions') },
      { name: 'Lien vers connexion', found: content.includes('/login') }
    ];
    
    for (const check of registrationChecks) {
      if (check.found) {
        logSuccess(`Inscription: ${check.name}`);
      } else {
        logError(`Inscription: ${check.name} manquant`);
      }
    }
    
    // V√©rifier la structure HTML
    const htmlStructure = [
      'input', 'label', 'button', 'div', 'section', 'fieldset'
    ];
    
    for (const element of htmlStructure) {
      if (content.includes(element)) {
        logSuccess(`Inscription: √âl√©ment ${element} pr√©sent`);
      } else {
        logWarning(`Inscription: √âl√©ment ${element} manquant`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test inscription: ${error.message}`);
    return false;
  }
}

// =====================================================
// 3. TEST DE LA PAGE DE CONNEXION
// =====================================================

async function testLoginPage() {
  logHeader('üîê TEST PAGE DE CONNEXION');
  
  try {
    const response = await fetch(`${BASE_URL}/login`);
    const content = await response.text();
    
    logInfo('Analyse de la page de connexion...');
    
    // V√©rifier les √©l√©ments du formulaire
    const loginChecks = [
      { name: 'Page accessible', found: response.ok },
      { name: 'Formulaire de connexion', found: content.includes('form') },
      { name: 'Champ email', found: content.includes('email') },
      { name: 'Champ mot de passe', found: content.includes('password') },
      { name: 'Bouton de connexion', found: content.includes('Login') || content.includes('Sign in') || content.includes('Connexion') },
      { name: 'Lien mot de passe oubli√©', found: content.includes('forgot') || content.includes('password') },
      { name: 'Lien vers inscription', found: content.includes('/register') },
      { name: 'Souvenir de moi', found: content.includes('remember') || content.includes('stay') },
      { name: 'Validation des champs', found: content.includes('required') || content.includes('validation') },
      { name: 'S√©curit√© CSRF', found: content.includes('csrf') || content.includes('token') }
    ];
    
    for (const check of loginChecks) {
      if (check.found) {
        logSuccess(`Connexion: ${check.name}`);
      } else {
        logError(`Connexion: ${check.name} manquant`);
      }
    }
    
    // V√©rifier les fonctionnalit√©s de s√©curit√©
    const securityFeatures = [
      'secure', 'https', 'ssl', 'encryption', 'hash'
    ];
    
    for (const feature of securityFeatures) {
      if (content.includes(feature)) {
        logSuccess(`Connexion: S√©curit√© ${feature} pr√©sente`);
      } else {
        logWarning(`Connexion: S√©curit√© ${feature} non d√©tect√©e`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test connexion: ${error.message}`);
    return false;
  }
}

// =====================================================
// 4. TEST DU DASHBOARD ADMIN
// =====================================================

async function testAdminDashboard() {
  logHeader('üë®‚Äçüíº TEST DASHBOARD ADMIN');
  
  try {
    const response = await fetch(`${BASE_URL}/admin`);
    const content = await response.text();
    
    logInfo('Analyse du dashboard admin...');
    
    // V√©rifier les √©l√©ments du dashboard admin
    const adminChecks = [
      { name: 'Page accessible', found: response.ok },
      { name: 'Interface admin', found: content.includes('admin') || content.includes('dashboard') },
      { name: 'Navigation admin', found: content.includes('nav') || content.includes('menu') },
      { name: 'Gestion utilisateurs', found: content.includes('users') || content.includes('utilisateurs') },
      { name: 'Gestion transactions', found: content.includes('transactions') },
      { name: 'Gestion plans', found: content.includes('plans') || content.includes('investments') },
      { name: 'Gestion wallets', found: content.includes('wallets') || content.includes('crypto') },
      { name: 'Statistiques', found: content.includes('stats') || content.includes('statistics') },
      { name: 'Logs syst√®me', found: content.includes('logs') || content.includes('system') },
      { name: 'Param√®tres', found: content.includes('settings') || content.includes('param√®tres') },
      { name: 'Notifications', found: content.includes('notifications') },
      { name: 'S√©curit√©', found: content.includes('security') || content.includes('s√©curit√©') },
      { name: 'D√©connexion', found: content.includes('logout') || content.includes('d√©connexion') }
    ];
    
    for (const check of adminChecks) {
      if (check.found) {
        logSuccess(`Admin: ${check.name}`);
      } else {
        logError(`Admin: ${check.name} manquant`);
      }
    }
    
    // V√©rifier les actions admin
    const adminActions = [
      'create', 'edit', 'delete', 'update', 'manage', 'view', 'export'
    ];
    
    for (const action of adminActions) {
      if (content.includes(action)) {
        logSuccess(`Admin: Action ${action} disponible`);
      } else {
        logWarning(`Admin: Action ${action} non d√©tect√©e`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test dashboard admin: ${error.message}`);
    return false;
  }
}

// =====================================================
// 5. TEST DU DASHBOARD CLIENT
// =====================================================

async function testClientDashboard() {
  logHeader('üë§ TEST DASHBOARD CLIENT');
  
  try {
    const response = await fetch(`${BASE_URL}/client`);
    const content = await response.text();
    
    logInfo('Analyse du dashboard client...');
    
    // V√©rifier les √©l√©ments du dashboard client
    const clientChecks = [
      { name: 'Page accessible', found: response.ok },
      { name: 'Interface client', found: content.includes('client') || content.includes('dashboard') },
      { name: 'Navigation client', found: content.includes('nav') || content.includes('menu') },
      { name: 'Portefeuille', found: content.includes('wallet') || content.includes('portefeuille') },
      { name: 'Investissements', found: content.includes('investments') || content.includes('investissements') },
      { name: 'Transactions', found: content.includes('transactions') },
      { name: 'Historique', found: content.includes('history') || content.includes('historique') },
      { name: 'Profil', found: content.includes('profile') || content.includes('profil') },
      { name: 'Notifications', found: content.includes('notifications') },
      { name: 'Param√®tres', found: content.includes('settings') || content.includes('param√®tres') },
      { name: 'Support', found: content.includes('support') || content.includes('aide') },
      { name: 'S√©curit√©', found: content.includes('security') || content.includes('s√©curit√©') },
      { name: 'D√©connexion', found: content.includes('logout') || content.includes('d√©connexion') },
      { name: 'Balance', found: content.includes('balance') || content.includes('solde') },
      { name: 'Gains', found: content.includes('profits') || content.includes('gains') }
    ];
    
    for (const check of clientChecks) {
      if (check.found) {
        logSuccess(`Client: ${check.name}`);
      } else {
        logError(`Client: ${check.name} manquant`);
      }
    }
    
    // V√©rifier les actions client
    const clientActions = [
      'invest', 'withdraw', 'deposit', 'transfer', 'view', 'update', 'manage'
    ];
    
    for (const action of clientActions) {
      if (content.includes(action)) {
        logSuccess(`Client: Action ${action} disponible`);
      } else {
        logWarning(`Client: Action ${action} non d√©tect√©e`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test dashboard client: ${error.message}`);
    return false;
  }
}

// =====================================================
// 6. TEST DE LA NAVIGATION
// =====================================================

async function testNavigation() {
  logHeader('üß≠ TEST DE LA NAVIGATION');
  
  try {
    const urls = [
      { url: BASE_URL, name: 'Page d\'accueil' },
      { url: `${BASE_URL}/login`, name: 'Page de connexion' },
      { url: `${BASE_URL}/register`, name: 'Page d\'inscription' },
      { url: `${BASE_URL}/admin`, name: 'Dashboard admin' },
      { url: `${BASE_URL}/client`, name: 'Dashboard client' }
    ];
    
    logInfo('Test de la navigation entre les pages...');
    
    for (const { url, name } of urls) {
      try {
        const startTime = Date.now();
        const response = await fetch(url);
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        if (response.ok) {
          const content = await response.text();
          
          if (content.includes('CryptoBoost') || content.includes('cryptoboost')) {
            logSuccess(`${name}: OK (${response.status}) - ${responseTime}ms`);
          } else {
            logWarning(`${name}: Contenu inattendu (${response.status}) - ${responseTime}ms`);
          }
        } else {
          logError(`${name}: Erreur ${response.status} - ${responseTime}ms`);
        }
      } catch (error) {
        logError(`${name}: Erreur de connexion - ${error.message}`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test navigation: ${error.message}`);
    return false;
  }
}

// =====================================================
// 7. TEST DE LA RESPONSIVIT√â
// =====================================================

async function testResponsiveness() {
  logHeader('üì± TEST DE LA RESPONSIVIT√â');
  
  try {
    const response = await fetch(BASE_URL);
    const content = await response.text();
    
    logInfo('Analyse de la responsivit√©...');
    
    // V√©rifier les √©l√©ments de responsivit√©
    const responsiveChecks = [
      { name: 'Viewport meta tag', found: content.includes('viewport') },
      { name: 'Media queries', found: content.includes('@media') },
      { name: 'Responsive design', found: content.includes('responsive') || content.includes('mobile') },
      { name: 'Flexbox/Grid', found: content.includes('flex') || content.includes('grid') },
      { name: 'Mobile menu', found: content.includes('hamburger') || content.includes('mobile-menu') },
      { name: 'Touch targets', found: content.includes('touch') || content.includes('tap') },
      { name: 'Breakpoints', found: content.includes('sm:') || content.includes('md:') || content.includes('lg:') },
      { name: 'Images responsives', found: content.includes('srcset') || content.includes('sizes') }
    ];
    
    for (const check of responsiveChecks) {
      if (check.found) {
        logSuccess(`Responsive: ${check.name}`);
      } else {
        logWarning(`Responsive: ${check.name} non d√©tect√©`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test responsivit√©: ${error.message}`);
    return false;
  }
}

// =====================================================
// 8. TEST DES FONCTIONNALIT√âS INTERACTIVES
// =====================================================

async function testInteractiveFeatures() {
  logHeader('üéÆ TEST DES FONCTIONNALIT√âS INTERACTIVES');
  
  try {
    const response = await fetch(BASE_URL);
    const content = await response.text();
    
    logInfo('Analyse des fonctionnalit√©s interactives...');
    
    // V√©rifier les fonctionnalit√©s interactives
    const interactiveChecks = [
      { name: 'JavaScript charg√©', found: content.includes('script') },
      { name: 'Event listeners', found: content.includes('onclick') || content.includes('addEventListener') },
      { name: 'Formulaires interactifs', found: content.includes('form') && content.includes('input') },
      { name: 'Validation c√¥t√© client', found: content.includes('validation') || content.includes('required') },
      { name: 'Animations', found: content.includes('animation') || content.includes('transition') },
      { name: 'Modales/Popups', found: content.includes('modal') || content.includes('popup') || content.includes('dialog') },
      { name: 'Navigation dynamique', found: content.includes('router') || content.includes('navigate') },
      { name: '√âtat de l\'application', found: content.includes('state') || content.includes('store') }
    ];
    
    for (const check of interactiveChecks) {
      if (check.found) {
        logSuccess(`Interactive: ${check.name}`);
      } else {
        logWarning(`Interactive: ${check.name} non d√©tect√©`);
      }
    }
    
    return true;
  } catch (error) {
    logError(`Erreur test fonctionnalit√©s interactives: ${error.message}`);
    return false;
  }
}

// =====================================================
// FONCTION PRINCIPALE
// =====================================================

async function runManualTests() {
  logHeader('üöÄ TEST MANUEL COMPLET - CRYPTOBOOST APPLICATION');
  
  const startTime = Date.now();
  const results = [];
  
  try {
    logInfo('D√©marrage des tests manuels...');
    
    // Tests s√©quentiels
    const homeResult = await testHomePage();
    const registrationResult = await testRegistrationPage();
    const loginResult = await testLoginPage();
    const adminResult = await testAdminDashboard();
    const clientResult = await testClientDashboard();
    const navigationResult = await testNavigation();
    const responsiveResult = await testResponsiveness();
    const interactiveResult = await testInteractiveFeatures();
    
    results.push(homeResult, registrationResult, loginResult, adminResult, clientResult, navigationResult, responsiveResult, interactiveResult);
    
    const totalTime = Date.now() - startTime;
    
    // R√©sum√© final
    logHeader('üéâ R√âSUM√â FINAL - TEST MANUEL');
    
    const successCount = results.filter(Boolean).length;
    const totalCount = results.length;
    const successRate = (successCount / totalCount) * 100;
    
    logSuccess(`Tests r√©ussis: ${successCount}/${totalCount} (${successRate.toFixed(1)}%)`);
    logSuccess(`Temps total: ${totalTime}ms`);
    
    if (successRate >= 80) {
      log('\nüéØ VOTRE APPLICATION CRYPTOBOOST EST FONCTIONNELLE !', 'green');
      log('üåê URL: https://cryptoboost.world/', 'cyan');
      log('üìä Dashboard Admin: https://cryptoboost.world/admin', 'cyan');
      log('üë§ Dashboard Client: https://cryptoboost.world/client', 'cyan');
    } else if (successRate >= 60) {
      log('\n‚ö†Ô∏è APPLICATION PARTIELLEMENT FONCTIONNELLE', 'yellow');
      log('Des am√©liorations sont n√©cessaires pour une exp√©rience optimale.', 'yellow');
    } else {
      log('\n‚ùå DES PROBL√àMES MAJEURS ONT √âT√â D√âTECT√âS', 'red');
      log('L\'application n√©cessite des corrections importantes.', 'red');
    }
    
  } catch (error) {
    logError(`Erreur critique lors des tests: ${error.message}`);
    process.exit(1);
  }
}

// Ex√©cution des tests
runManualTests().catch(error => {
  logError(`Erreur fatale: ${error.message}`);
  process.exit(1);
});