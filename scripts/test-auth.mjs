#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la configuration d'authentification
 * Usage: node scripts/test-auth.mjs
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://ropzeweidvjkfeyyuiim.supabase.co';
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJvcHpld2VpZHZqa2ZleXl1aWltIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1NzE5OTEsImV4cCI6MjA3MDE0Nzk5MX0.5oA4zhbQyv0zZLqYLIOb74yl2xh_1-4v_IAa8SKcOYg';

// Cr√©er le client Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

console.log('üîç Test de configuration d\'authentification CryptoBoost\n');

async function testConnection() {
  console.log('1Ô∏è‚É£ Test de connexion √† Supabase...');
  
  try {
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Erreur de connexion:', error.message);
      return false;
    }
    
    console.log('‚úÖ Connexion √† Supabase r√©ussie');
    return true;
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.message);
    return false;
  }
}

async function testAdminExists() {
  console.log('\n2Ô∏è‚É£ V√©rification de l\'admin...');
  
  try {
    const { data, error } = await supabase
      .from('users')
      .select('email, role, status')
      .eq('email', 'admin@cryptoboost.world')
      .single();
    
    if (error) {
      console.log('‚ùå Admin non trouv√©:', error.message);
      return false;
    }
    
    console.log('‚úÖ Admin trouv√©:', {
      email: data.email,
      role: data.role,
      status: data.status
    });
    return true;
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification admin:', error.message);
    return false;
  }
}

async function testAuthUsers() {
  console.log('\n3Ô∏è‚É£ V√©rification de auth.users...');
  
  try {
    // On ne peut pas acc√©der directement √† auth.users via l'API publique
    // On v√©rifie plut√¥t que l'admin peut se connecter
    const { data, error } = await supabase.auth.signInWithPassword({
      email: 'admin@cryptoboost.world',
      password: 'CryptoAdmin2024!'
    });
    
    if (error) {
      console.log('‚ùå Admin ne peut pas se connecter:', error.message);
      return false;
    }
    
    console.log('‚úÖ Admin peut se connecter:', {
      email: data.user?.email,
      id: data.user?.id
    });
    
    // Se d√©connecter apr√®s le test
    await supabase.auth.signOut();
    return true;
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification auth.users:', error.message);
    return false;
  }
}

async function testDatabaseStructure() {
  console.log('\n4Ô∏è‚É£ V√©rification de la structure de la base...');
  
  try {
    // V√©rifier les tables principales
    const tables = ['users', 'investment_plans', 'crypto_wallets', 'transactions'];
    
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table)
        .select('count')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå Table ${table} non accessible:`, error.message);
        return false;
      }
      
      console.log(`‚úÖ Table ${table} accessible`);
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification des tables:', error.message);
    return false;
  }
}

async function testEnvironmentVariables() {
  console.log('\n5Ô∏è‚É£ V√©rification des variables d\'environnement...');
  
  console.log('üìã Configuration actuelle:');
  console.log(`   URL: ${SUPABASE_URL}`);
  console.log(`   Cl√©: ${SUPABASE_ANON_KEY.substring(0, 20)}...`);
  
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    console.log('‚ùå Variables d\'environnement manquantes');
    return false;
  }
  
  if (!SUPABASE_URL.includes('supabase.co')) {
    console.log('‚ùå URL Supabase invalide');
    return false;
  }
  
  console.log('‚úÖ Variables d\'environnement correctes');
  return true;
}

async function runTests() {
  const tests = [
    { name: 'Connexion', fn: testConnection },
    { name: 'Variables d\'environnement', fn: testEnvironmentVariables },
    { name: 'Structure de base', fn: testDatabaseStructure },
    { name: 'Admin dans users', fn: testAdminExists },
    { name: 'Admin dans auth.users', fn: testAuthUsers },
  ];
  
  let passed = 0;
  let total = tests.length;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result) passed++;
    } catch (error) {
      console.log(`‚ùå Erreur dans le test ${test.name}:`, error.message);
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üìä R√âSULTATS DES TESTS');
  console.log('='.repeat(50));
  console.log(`‚úÖ Tests r√©ussis: ${passed}/${total}`);
  
  if (passed === total) {
    console.log('üéâ Tous les tests sont pass√©s !');
    console.log('üîó Vous pouvez maintenant tester l\'authentification sur votre site');
  } else {
    console.log('‚ö†Ô∏è  Certains tests ont √©chou√©');
    console.log('üîß Ex√©cutez le script HOTFIX_CONFIRMED_AT.sql dans Supabase');
  }
  
  console.log('\nüìã Actions recommand√©es:');
  console.log('1. Si des tests √©chouent, ex√©cutez HOTFIX_CONFIRMED_AT.sql');
  console.log('2. Testez la connexion admin: admin@cryptoboost.world / CryptoAdmin2024!');
  console.log('3. Testez l\'inscription d\'un nouveau client');
}

// Ex√©cuter les tests
runTests().catch(console.error);