#!/usr/bin/env node

/**
 * SCRIPT DE CORRECTION - PAGE LOGIN SSL
 * Correction sp√©cifique de la page Login avec probl√®me SSL intermittent
 */

import fs from 'fs';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  log(`\n${colors.cyan}${'='.repeat(60)}`, 'cyan');
  log(`${colors.bright}${title}${colors.reset}`, 'bright');
  log(`${colors.cyan}${'='.repeat(60)}${colors.reset}`, 'cyan');
}

// ============================================================================
// CORRECTION 1: HEADERS SP√âCIAUX POUR LOGIN
// ============================================================================

function fixLoginHeaders() {
  logSection('üîß CORRECTION 1: HEADERS SP√âCIAUX POUR LOGIN');
  
  try {
    // Configuration avec headers sp√©ciaux pour la page login
    const headersContent = `# Configuration SSL avec headers sp√©ciaux pour Login
/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff

# Configuration sp√©ciale pour la page login
/login
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  Cache-Control: no-cache, no-store, must-revalidate
  Pragma: no-cache
  Expires: 0

# Cache pour les assets
/assets/*
  Cache-Control: public, max-age=31536000, immutable

# Pas de cache pour les pages HTML
/*.html
  Cache-Control: no-cache, no-store, must-revalidate

# Cache pour les ressources statiques
*.js
*.css
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico
*.woff
*.woff2
  Cache-Control: public, max-age=31536000`;

    fs.writeFileSync('_headers', headersContent);
    log('‚úÖ Headers sp√©ciaux pour Login appliqu√©s', 'green');
    return true;
  } catch (error) {
    log(`‚ùå Erreur headers Login: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 2: REDIRECTIONS SP√âCIALES POUR LOGIN
// ============================================================================

function fixLoginRedirects() {
  logSection('üîß CORRECTION 2: REDIRECTIONS SP√âCIALES POUR LOGIN');
  
  try {
    // Redirections avec configuration sp√©ciale pour login
    const redirectsContent = `# Redirections SSL avec configuration sp√©ciale pour Login
http://cryptoboost.world/* https://cryptoboost.world/:splat 301!
http://www.cryptoboost.world/* https://cryptoboost.world/:splat 301!
https://www.cryptoboost.world/* https://cryptoboost.world/:splat 301!

# Redirection sp√©ciale pour login
http://cryptoboost.world/login https://cryptoboost.world/login 301!
https://www.cryptoboost.world/login https://cryptoboost.world/login 301!

# SPA fallback
/*    /index.html   200

# S√©curit√©
/.env /404 404
/.git /404 404
/node_modules /404 404`;

    fs.writeFileSync('_redirects', redirectsContent);
    log('‚úÖ Redirections sp√©ciales pour Login appliqu√©es', 'green');
    return true;
  } catch (error) {
    log(`‚ùå Erreur redirections Login: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 3: NETLIFY.TOML SP√âCIAL POUR LOGIN
// ============================================================================

function fixLoginNetlify() {
  logSection('üîß CORRECTION 3: NETLIFY.TOML SP√âCIAL POUR LOGIN');
  
  try {
    // Configuration Netlify avec headers sp√©ciaux pour login
    const netlifyContent = `[build]
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"
  NPM_VERSION = "9"

# Redirections SSL simples
[[redirects]]
  from = "http://cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301

[[redirects]]
  from = "http://www.cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301

[[redirects]]
  from = "https://www.cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301

# Redirection sp√©ciale pour login
[[redirects]]
  from = "http://cryptoboost.world/login"
  to = "https://cryptoboost.world/login"
  status = 301

[[redirects]]
  from = "https://www.cryptoboost.world/login"
  to = "https://cryptoboost.world/login"
  status = 301

# SPA fallback
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Headers de s√©curit√© minimaux
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"

# Headers sp√©ciaux pour la page login
[[headers]]
  for = "/login"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Cache-Control = "no-cache, no-store, must-revalidate"
    Pragma = "no-cache"
    Expires = "0"

# Cache pour les assets
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# Pas de cache pour les pages HTML
[[headers]]
  for = "/*.html"
  [headers.values]
    Cache-Control = "no-cache, no-store, must-revalidate"`;

    fs.writeFileSync('netlify.toml', netlifyContent);
    log('‚úÖ Configuration Netlify sp√©ciale pour Login appliqu√©e', 'green');
    return true;
  } catch (error) {
    log(`‚ùå Erreur Netlify Login: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 4: V√âRIFICATION COMPOSANT LOGIN
// ============================================================================

function checkLoginComponent() {
  logSection('üîß CORRECTION 4: V√âRIFICATION COMPOSANT LOGIN');
  
  try {
    const loginPath = 'src/pages/auth/Login.tsx';
    
    if (fs.existsSync(loginPath)) {
      const loginContent = fs.readFileSync(loginPath, 'utf8');
      
      // V√©rifier les probl√®mes potentiels
      let issues = [];
      
      if (loginContent.includes('window.location')) {
        issues.push('Redirections c√¥t√© client');
      }
      
      if (loginContent.includes('fetch(')) {
        issues.push('Appels fetch directs');
      }
      
      if (loginContent.includes('XMLHttpRequest')) {
        issues.push('XMLHttpRequest');
      }
      
      if (issues.length > 0) {
        log(`‚ö†Ô∏è Probl√®mes potentiels d√©tect√©s: ${issues.join(', ')}`, 'yellow');
      } else {
        log('‚úÖ Composant Login semble correct', 'green');
      }
      
      return true;
    } else {
      log('‚ùå Fichier Login.tsx non trouv√©', 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erreur v√©rification Login: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 5: CR√âATION FICHIER DE CONFIGURATION LOGIN
// ============================================================================

function createLoginConfig() {
  logSection('üîß CORRECTION 5: CONFIGURATION LOGIN');
  
  try {
    // Cr√©er un fichier de configuration sp√©cial pour la page login
    const loginConfigContent = `# Configuration sp√©ciale pour la page Login
# Probl√®me SSL intermittent sur /login

## Sympt√¥mes :
# - SSL alert number 80
# - Erreur intermittente
# - Fonctionne parfois, √©choue parfois

## Solutions appliqu√©es :
# 1. Headers sp√©ciaux pour /login
# 2. Redirections SSL explicites
# 3. Cache-control sp√©cial
# 4. V√©rification composant

## Headers sp√©ciaux :
# - Cache-Control: no-cache, no-store, must-revalidate
# - Pragma: no-cache
# - Expires: 0

## Redirections explicites :
# - http://cryptoboost.world/login -> https://cryptoboost.world/login
# - https://www.cryptoboost.world/login -> https://cryptoboost.world/login

## Test apr√®s d√©ploiement :
# 1. https://cryptoboost.world/login
# 2. V√©rifier les erreurs SSL
# 3. Tester plusieurs fois

## Codes d'acc√®s :
# Client: client@cryptoboost.world / ClientPass123!
# Admin: admin2@cryptoboost.world / AdminPass123!

Date de correction: ${new Date().toISOString()}`;

    fs.writeFileSync('LOGIN_SSL_CONFIG.md', loginConfigContent);
    log('‚úÖ Configuration Login cr√©√©e', 'green');
    return true;
  } catch (error) {
    log(`‚ùå Erreur configuration Login: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// FONCTION PRINCIPALE
// ============================================================================

function fixLoginPageSSL() {
  log('üîß CORRECTION PAGE LOGIN SSL', 'bright');
  log('Correction sp√©cifique de la page Login avec probl√®me SSL intermittent', 'cyan');
  
  try {
    // 1. Headers sp√©ciaux pour Login
    const loginHeaders = fixLoginHeaders();
    
    // 2. Redirections sp√©ciales pour Login
    const loginRedirects = fixLoginRedirects();
    
    // 3. Netlify.toml sp√©cial pour Login
    const loginNetlify = fixLoginNetlify();
    
    // 4. V√©rification composant Login
    const loginComponent = checkLoginComponent();
    
    // 5. Configuration Login
    const loginConfig = createLoginConfig();
    
    // R√©sum√©
    logSection('üìä R√âSUM√â DES CORRECTIONS LOGIN');
    log(`‚úÖ Headers Login: ${loginHeaders ? 'Oui' : 'Non'}`, loginHeaders ? 'green' : 'red');
    log(`‚úÖ Redirections Login: ${loginRedirects ? 'Oui' : 'Non'}`, loginRedirects ? 'green' : 'red');
    log(`‚úÖ Netlify Login: ${loginNetlify ? 'Oui' : 'Non'}`, loginNetlify ? 'green' : 'red');
    log(`‚úÖ Composant Login: ${loginComponent ? 'Oui' : 'Non'}`, loginComponent ? 'green' : 'red');
    log(`‚úÖ Config Login: ${loginConfig ? 'Oui' : 'Non'}`, loginConfig ? 'green' : 'red');
    
    const allFixed = loginHeaders && loginRedirects && loginNetlify && loginComponent && loginConfig;
    
    if (allFixed) {
      logSection('üéâ CORRECTION LOGIN SSL R√âUSSIE');
      log('‚úÖ Headers sp√©ciaux appliqu√©s', 'green');
      log('‚úÖ Redirections explicites configur√©es', 'green');
      log('‚úÖ Cache-control optimis√©', 'green');
      log('‚úÖ Configuration SSL sp√©ciale', 'green');
      
      log('\nüìã PROCHAINES √âTAPES:', 'yellow');
      log('1. Commitez les changements', 'blue');
      log('2. Poussez vers GitHub', 'blue');
      log('3. Attendez le red√©ploiement Netlify', 'blue');
      log('4. Testez la page Login plusieurs fois', 'blue');
      
      log('\nüåê PAGE √Ä TESTER:', 'yellow');
      log('   - https://cryptoboost.world/login', 'blue');
      
      log('\nüîë CODES D\'ACC√àS:', 'yellow');
      log('   Client: client@cryptoboost.world / ClientPass123!', 'blue');
      log('   Admin: admin2@cryptoboost.world / AdminPass123!', 'blue');
      
      log('\nüí° Configuration sp√©ciale pour r√©soudre l\'erreur SSL intermittente !', 'green');
    } else {
      logSection('‚ö†Ô∏è  PROBL√àMES RESTANTS');
      log('‚ùå Certaines corrections Login ont √©chou√©', 'red');
      log('üí° V√©rifiez les permissions de fichiers', 'yellow');
    }
    
  } catch (error) {
    log('\n‚ùå Erreur lors de la correction Login SSL', 'red');
    log(error.message, 'red');
  }
}

// Ex√©cution
fixLoginPageSSL();