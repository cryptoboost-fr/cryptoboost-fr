#!/usr/bin/env node

/**
 * SCRIPT DE TEST AVEC DONN√âES - APPLICATION CRYPTOBOOST
 * Teste toutes les fonctionnalit√©s avec les donn√©es de la base
 */

import fetch from 'node-fetch';

// Configuration
const SUPABASE_URL = 'https://ropzeweidvjkfeyyuiim.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJvcHpld2VpZHZqa2ZleXl1aWltIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1NzE5OTEsImV4cCI6MjA3MDE0Nzk5MX0.5oA4zhbQyv0zZLqYLIOb74yl2xh_1-4v_IAa8SKcOYg';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// Statistiques globales
let stats = {
  total: 0,
  passed: 0,
  failed: 0,
  startTime: Date.now()
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(testName, success, details = '') {
  stats.total++;
  if (success) {
    stats.passed++;
    log(`‚úÖ ${testName}`, 'green');
  } else {
    stats.failed++;
    log(`‚ùå ${testName}`, 'red');
  }
  if (details) {
    log(`   ${details}`, 'yellow');
  }
}

function logSection(title) {
  log(`\n${colors.cyan}${'='.repeat(60)}`, 'cyan');
  log(`${colors.bright}${title}${colors.reset}`, 'bright');
  log(`${colors.cyan}${'='.repeat(60)}${colors.reset}`, 'cyan');
}

// ============================================================================
// TESTS AVEC DONN√âES
// ============================================================================

async function testInvestmentPlans() {
  logSection('üí∞ TEST DES PLANS D\'INVESTISSEMENT');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/investment_plans?select=*&is_active=eq.true`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (response.ok) {
      const plans = await response.json();
      logTest('R√©cup√©ration plans d\'investissement', true, `${plans.length} plans trouv√©s`);
      
      // V√©rifier les plans sp√©cifiques
      const planNames = plans.map(p => p.name);
      logTest('Plan Starter pr√©sent', planNames.includes('Plan Starter'), 'Plan Starter trouv√©');
      logTest('Plan Premium pr√©sent', planNames.includes('Plan Premium'), 'Plan Premium trouv√©');
      logTest('Plan VIP pr√©sent', planNames.includes('Plan VIP'), 'Plan VIP trouv√©');
      logTest('Plan Crypto pr√©sent', planNames.includes('Plan Crypto'), 'Plan Crypto trouv√©');
      
      return plans;
    } else {
      logTest('R√©cup√©ration plans d\'investissement', false, `Status: ${response.status}`);
      return [];
    }
  } catch (error) {
    logTest('R√©cup√©ration plans d\'investissement', false, error.message);
    return [];
  }
}

async function testUsers() {
  logSection('üë• TEST DES UTILISATEURS');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/users?select=*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (response.ok) {
      const users = await response.json();
      logTest('R√©cup√©ration utilisateurs', true, `${users.length} utilisateurs trouv√©s`);
      
      // V√©rifier les utilisateurs sp√©cifiques
      const userEmails = users.map(u => u.email);
      logTest('Admin pr√©sent', userEmails.includes('admin@cryptoboost.world'), 'Admin trouv√©');
      logTest('Client1 pr√©sent', userEmails.includes('client1@cryptoboost.world'), 'Client1 trouv√©');
      logTest('Client2 pr√©sent', userEmails.includes('client2@cryptoboost.world'), 'Client2 trouv√©');
      
      return users;
    } else {
      logTest('R√©cup√©ration utilisateurs', false, `Status: ${response.status}`);
      return [];
    }
  } catch (error) {
    logTest('R√©cup√©ration utilisateurs', false, error.message);
    return [];
  }
}

async function testCryptoWallets() {
  logSection('üîê TEST DES WALLETS CRYPTO');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/crypto_wallets?select=*&is_active=eq.true`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (response.ok) {
      const wallets = await response.json();
      logTest('R√©cup√©ration wallets crypto', true, `${wallets.length} wallets trouv√©s`);
      
      // V√©rifier les wallets sp√©cifiques
      const walletTypes = wallets.map(w => w.crypto_type);
      logTest('Wallet BTC pr√©sent', walletTypes.includes('BTC'), 'Wallet BTC trouv√©');
      logTest('Wallet ETH pr√©sent', walletTypes.includes('ETH'), 'Wallet ETH trouv√©');
      logTest('Wallet USDT pr√©sent', walletTypes.includes('USDT'), 'Wallet USDT trouv√©');
      
      return wallets;
    } else {
      logTest('R√©cup√©ration wallets crypto', false, `Status: ${response.status}`);
      return [];
    }
  } catch (error) {
    logTest('R√©cup√©ration wallets crypto', false, error.message);
    return [];
  }
}

async function testTransactions() {
  logSection('üí≥ TEST DES TRANSACTIONS');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/transactions?select=*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (response.ok) {
      const transactions = await response.json();
      logTest('R√©cup√©ration transactions', true, `${transactions.length} transactions trouv√©es`);
      
      // V√©rifier les types de transactions
      const transactionTypes = transactions.map(t => t.type);
      logTest('Transaction deposit pr√©sente', transactionTypes.includes('deposit'), 'Deposit trouv√©');
      logTest('Transaction investment pr√©sente', transactionTypes.includes('investment'), 'Investment trouv√©');
      logTest('Transaction profit pr√©sente', transactionTypes.includes('profit'), 'Profit trouv√©');
      logTest('Transaction withdrawal pr√©sente', transactionTypes.includes('withdrawal'), 'Withdrawal trouv√©');
      
      return transactions;
    } else {
      logTest('R√©cup√©ration transactions', false, `Status: ${response.status}`);
      return [];
    }
  } catch (error) {
    logTest('R√©cup√©ration transactions', false, error.message);
    return [];
  }
}

async function testNotifications() {
  logSection('üîî TEST DES NOTIFICATIONS');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/notifications?select=*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (response.ok) {
      const notifications = await response.json();
      logTest('R√©cup√©ration notifications', true, `${notifications.length} notifications trouv√©es`);
      
      // V√©rifier les types de notifications
      const notificationTypes = notifications.map(n => n.type);
      logTest('Notification success pr√©sente', notificationTypes.includes('success'), 'Success trouv√©');
      logTest('Notification info pr√©sente', notificationTypes.includes('info'), 'Info trouv√©');
      
      return notifications;
    } else {
      logTest('R√©cup√©ration notifications', false, `Status: ${response.status}`);
      return [];
    }
  } catch (error) {
    logTest('R√©cup√©ration notifications', false, error.message);
    return [];
  }
}

async function testSystemLogs() {
  logSection('üìã TEST DES LOGS SYST√àME');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/system_logs?select=*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });

    if (response.ok) {
      const logs = await response.json();
      logTest('R√©cup√©ration logs syst√®me', true, `${logs.length} logs trouv√©s`);
      
      // V√©rifier les actions de logs
      const logActions = logs.map(l => l.action);
      logTest('Log user_registration pr√©sent', logActions.includes('user_registration'), 'User registration trouv√©');
      logTest('Log investment_created pr√©sent', logActions.includes('investment_created'), 'Investment created trouv√©');
      logTest('Log transaction_completed pr√©sent', logActions.includes('transaction_completed'), 'Transaction completed trouv√©');
      logTest('Log profit_generated pr√©sent', logActions.includes('profit_generated'), 'Profit generated trouv√©');
      
      return logs;
    } else {
      logTest('R√©cup√©ration logs syst√®me', false, `Status: ${response.status}`);
      return [];
    }
  } catch (error) {
    logTest('R√©cup√©ration logs syst√®me', false, error.message);
    return [];
  }
}

async function testAuthentication() {
  logSection('üîê TEST D\'AUTHENTIFICATION');
  
  try {
    // Test de connexion avec un utilisateur existant
    const response = await fetch(`${SUPABASE_URL}/auth/v1/token?grant_type=password`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_ANON_KEY
      },
      body: JSON.stringify({
        email: 'client1@cryptoboost.world',
        password: 'ClientPassword123!'
      })
    });

    if (response.ok) {
      const data = await response.json();
      logTest('Authentification utilisateur', true, 'Token re√ßu');
      logTest('Token access pr√©sent', !!data.access_token, 'Access token trouv√©');
      logTest('Token refresh pr√©sent', !!data.refresh_token, 'Refresh token trouv√©');
      return data;
    } else {
      logTest('Authentification utilisateur', false, `Status: ${response.status}`);
      return null;
    }
  } catch (error) {
    logTest('Authentification utilisateur', false, error.message);
    return null;
  }
}

// ============================================================================
// FONCTION PRINCIPALE
// ============================================================================

async function runTestWithData() {
  log('üöÄ TEST AVEC DONN√âES CRYPTOBOOST', 'bright');
  log('V√©rification de toutes les fonctionnalit√©s avec les donn√©es de la base', 'cyan');
  
  try {
    // 1. Test des plans d'investissement
    await testInvestmentPlans();
    
    // 2. Test des utilisateurs
    await testUsers();
    
    // 3. Test des wallets crypto
    await testCryptoWallets();
    
    // 4. Test des transactions
    await testTransactions();
    
    // 5. Test des notifications
    await testNotifications();
    
    // 6. Test des logs syst√®me
    await testSystemLogs();
    
    // 7. Test d'authentification
    await testAuthentication();

    // R√©sum√© final
    const endTime = Date.now();
    const duration = ((endTime - stats.startTime) / 1000).toFixed(2);
    
    logSection('üìä R√âSUM√â FINAL DES TESTS');
    log(`‚è±Ô∏è  Dur√©e totale : ${duration} secondes`, 'blue');
    log(`üìà Tests r√©ussis : ${stats.passed}/${stats.total}`, 'green');
    log(`‚ùå Tests √©chou√©s : ${stats.failed}/${stats.total}`, 'red');
    log(`üìä Taux de r√©ussite : ${((stats.passed / stats.total) * 100).toFixed(1)}%`, 'cyan');
    
    if (stats.failed === 0) {
      log('\nüéâ F√âLICITATIONS ! TOUS LES TESTS SONT R√âUSSIS !', 'bright');
      log('‚úÖ L\'application CryptoBoost est 100% fonctionnelle', 'green');
      log('üöÄ Pr√™te pour la production', 'green');
      log('üèÜ Toutes les donn√©es sont pr√©sentes et accessibles', 'green');
    } else {
      log('\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â', 'yellow');
      log(`‚ùå ${stats.failed} probl√®me(s) √† r√©soudre`, 'red');
    }

  } catch (error) {
    log('\n‚ùå Erreur lors des tests avec donn√©es', 'red');
    log(error.message, 'red');
  }
}

// Ex√©cution des tests
runTestWithData().catch(console.error);