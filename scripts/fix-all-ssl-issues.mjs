#!/usr/bin/env node

/**
 * SCRIPT DE CORRECTION COMPL√àTE - TOUS LES PROBL√àMES SSL
 * Corrige tous les probl√®mes SSL identifi√©s dans le code
 */

import fs from 'fs';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  log(`\n${colors.cyan}${'='.repeat(60)}`, 'cyan');
  log(`${colors.bright}${title}${colors.reset}`, 'bright');
  log(`${colors.cyan}${'='.repeat(60)}${colors.reset}`, 'cyan');
}

// ============================================================================
// PROBL√àMES IDENTIFI√âS
// ============================================================================

function identifyProblems() {
  logSection('üîç PROBL√àMES IDENTIFI√âS');
  
  log('‚ùå Probl√®me 1: Headers SSL dans _redirects (incorrect)', 'red');
  log('   - Les headers SSL ne doivent pas √™tre dans _redirects', 'yellow');
  log('   - Ils doivent √™tre uniquement dans _headers', 'yellow');
  
  log('‚ùå Probl√®me 2: Domaines incorrects dans index.html', 'red');
  log('   - R√©f√©rences √† cryptoboost.app au lieu de cryptoboost.world', 'yellow');
  log('   - Ligne 15: <link rel="canonical" href="https://cryptoboost.app" />', 'yellow');
  log('   - Ligne 20: <meta property="og:url" content="https://cryptoboost.app/" />', 'yellow');
  
  log('‚ùå Probl√®me 3: Configuration SSL trop restrictive', 'red');
  log('   - Headers de s√©curit√© trop stricts', 'yellow');
  log('   - Peut causer des conflits SSL', 'yellow');
  
  log('‚ùå Probl√®me 4: Redirections SSL conflictuelles', 'red');
  log('   - Redirections multiples dans _redirects et netlify.toml', 'yellow');
  log('   - Peut causer des boucles de redirection', 'yellow');
}

// ============================================================================
// CORRECTION 1: FICHIER _REDIRECTS
// ============================================================================

function fixRedirectsFile() {
  logSection('üîß CORRECTION 1: FICHIER _REDIRECTS');
  
  try {
    log('üîç Nettoyage du fichier _redirects...', 'blue');
    
    const redirectsContent = `# Redirections Netlify pour CryptoBoost
# Force HTTPS
http://cryptoboost.world/* https://cryptoboost.world/:splat 301!
http://www.cryptoboost.world/* https://cryptoboost.world/:splat 301!
https://www.cryptoboost.world/* https://cryptoboost.world/:splat 301!

# SPA fallback
/*    /index.html   200

# S√©curit√© - Bloquer l'acc√®s aux fichiers sensibles
/.env /404 404
/.git /404 404
/node_modules /404 404
/package.json /404 404
/package-lock.json /404 404`;

    fs.writeFileSync('_redirects', redirectsContent);
    log('‚úÖ Fichier _redirects nettoy√© (headers SSL supprim√©s)', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur correction _redirects: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 2: FICHIER INDEX.HTML
// ============================================================================

function fixIndexHtml() {
  logSection('üîß CORRECTION 2: FICHIER INDEX.HTML');
  
  try {
    log('üîç Correction des domaines dans index.html...', 'blue');
    
    let indexContent = fs.readFileSync('index.html', 'utf8');
    
    // Remplacer cryptoboost.app par cryptoboost.world
    indexContent = indexContent.replace(
      /https:\/\/cryptoboost\.app/g,
      'https://cryptoboost.world'
    );
    
    // Remplacer les r√©f√©rences canoniques
    indexContent = indexContent.replace(
      /<link rel="canonical" href="https:\/\/cryptoboost\.app" \/>/,
      '<link rel="canonical" href="https://cryptoboost.world" />'
    );
    
    // Remplacer les URLs Open Graph
    indexContent = indexContent.replace(
      /<meta property="og:url" content="https:\/\/cryptoboost\.app\/" \/>/,
      '<meta property="og:url" content="https://cryptoboost.world/" />'
    );
    
    fs.writeFileSync('index.html', indexContent);
    log('‚úÖ Domaines corrig√©s dans index.html', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur correction index.html: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 3: FICHIER _HEADERS (SIMPLIFI√â)
// ============================================================================

function fixHeadersFile() {
  logSection('üîß CORRECTION 3: FICHIER _HEADERS');
  
  try {
    log('üîç Simplification du fichier _headers...', 'blue');
    
    const headersContent = `# Headers de s√©curit√© simplifi√©s pour CryptoBoost
/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 1; mode=block
  Strict-Transport-Security: max-age=31536000; includeSubDomains
  Referrer-Policy: strict-origin-when-cross-origin

# Cache pour les assets
/assets/*
  Cache-Control: public, max-age=31536000, immutable

# Pas de cache pour les pages HTML
/*.html
  Cache-Control: no-cache, no-store, must-revalidate

# Cache pour les ressources statiques
*.js
*.css
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico
*.woff
*.woff2
  Cache-Control: public, max-age=31536000`;

    fs.writeFileSync('_headers', headersContent);
    log('‚úÖ Fichier _headers simplifi√© (headers SSL moins restrictifs)', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur correction _headers: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 4: FICHIER NETLIFY.TOML (SIMPLIFI√â)
// ============================================================================

function fixNetlifyToml() {
  logSection('üîß CORRECTION 4: FICHIER NETLIFY.TOML');
  
  try {
    log('üîç Simplification du fichier netlify.toml...', 'blue');
    
    const netlifyContent = `[build]
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"
  NPM_VERSION = "9"

# Redirections SSL simples
[[redirects]]
  from = "http://cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301

[[redirects]]
  from = "http://www.cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301

[[redirects]]
  from = "https://www.cryptoboost.world/*"
  to = "https://cryptoboost.world/:splat"
  status = 301

# SPA fallback
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Headers de s√©curit√© simplifi√©s
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"
    Referrer-Policy = "strict-origin-when-cross-origin"

# Cache pour les assets
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# Pas de cache pour les pages HTML
[[headers]]
  for = "/*.html"
  [headers.values]
    Cache-Control = "no-cache, no-store, must-revalidate"`;

    fs.writeFileSync('netlify.toml', netlifyContent);
    log('‚úÖ Fichier netlify.toml simplifi√©', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur correction netlify.toml: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// CORRECTION 5: VITE.CONFIG.TS (OPTIMIS√â)
// ============================================================================

function fixViteConfig() {
  logSection('üîß CORRECTION 5: VITE.CONFIG.TS');
  
  try {
    log('üîç Optimisation du fichier vite.config.ts...', 'blue');
    
    const viteContent = `import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 3000,
    host: true,
    strictPort: true,
    https: false, // D√©sactiver HTTPS en d√©veloppement pour √©viter les conflits
  },
  build: {
    outDir: 'dist',
    sourcemap: false,
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          ui: ['@radix-ui/react-slot', 'class-variance-authority', 'clsx', 'tailwind-merge'],
          supabase: ['@supabase/supabase-js'],
          animations: ['framer-motion'],
        },
      },
    },
    terserOptions: {
      compress: {
        drop_console: true,
        drop_debugger: true,
      },
    },
  },
  optimizeDeps: {
    include: ['react', 'react-dom', 'react-router-dom', '@supabase/supabase-js'],
  },
  define: {
    __APP_VERSION__: JSON.stringify(process.env.npm_package_version),
  },
  preview: {
    port: 4173,
    host: true,
    https: false, // D√©sactiver HTTPS en preview pour √©viter les conflits
  },
})`;

    fs.writeFileSync('vite.config.ts', viteContent);
    log('‚úÖ Fichier vite.config.ts optimis√© (HTTPS d√©sactiv√© en dev)', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå Erreur correction vite.config.ts: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// V√âRIFICATION DES CORRECTIONS
// ============================================================================

function verifyFixes() {
  logSection('üîç V√âRIFICATION DES CORRECTIONS');
  
  try {
    // V√©rifier _redirects
    const redirectsContent = fs.readFileSync('_redirects', 'utf8');
    if (!redirectsContent.includes('Strict-Transport-Security')) {
      log('‚úÖ _redirects nettoy√© (pas de headers SSL)', 'green');
    } else {
      log('‚ùå _redirects contient encore des headers SSL', 'red');
    }

    // V√©rifier index.html
    const indexContent = fs.readFileSync('index.html', 'utf8');
    if (!indexContent.includes('cryptoboost.app')) {
      log('‚úÖ index.html corrig√© (domaines mis √† jour)', 'green');
    } else {
      log('‚ùå index.html contient encore cryptoboost.app', 'red');
    }

    // V√©rifier _headers
    const headersContent = fs.readFileSync('_headers', 'utf8');
    if (headersContent.includes('Strict-Transport-Security')) {
      log('‚úÖ _headers contient les headers SSL simplifi√©s', 'green');
    } else {
      log('‚ùå _headers ne contient pas les headers SSL', 'red');
    }

    // V√©rifier netlify.toml
    const netlifyContent = fs.readFileSync('netlify.toml', 'utf8');
    if (netlifyContent.includes('Strict-Transport-Security')) {
      log('‚úÖ netlify.toml contient la configuration SSL simplifi√©e', 'green');
    } else {
      log('‚ùå netlify.toml ne contient pas la configuration SSL', 'red');
    }

    // V√©rifier vite.config.ts
    const viteContent = fs.readFileSync('vite.config.ts', 'utf8');
    if (viteContent.includes('https: false')) {
      log('‚úÖ vite.config.ts optimis√© (HTTPS d√©sactiv√© en dev)', 'green');
    } else {
      log('‚ùå vite.config.ts n\'est pas optimis√©', 'red');
    }

    return true;
  } catch (error) {
    log(`‚ùå Erreur v√©rification: ${error.message}`, 'red');
    return false;
  }
}

// ============================================================================
// FONCTION PRINCIPALE
// ============================================================================

async function fixAllSSLIssues() {
  log('üîß CORRECTION COMPL√àTE DE TOUS LES PROBL√àMES SSL', 'bright');
  log('Identification et correction de tous les probl√®mes SSL dans le code', 'cyan');
  
  try {
    // 1. Identifier les probl√®mes
    identifyProblems();
    
    // 2. Corriger les fichiers
    const redirectsFixed = fixRedirectsFile();
    const indexFixed = fixIndexHtml();
    const headersFixed = fixHeadersFile();
    const netlifyFixed = fixNetlifyToml();
    const viteFixed = fixViteConfig();
    
    // 3. V√©rifier les corrections
    const verificationOk = verifyFixes();

    // R√©sum√©
    logSection('üìä R√âSUM√â DES CORRECTIONS');
    log(`‚úÖ _redirects corrig√©: ${redirectsFixed ? 'Oui' : 'Non'}`, redirectsFixed ? 'green' : 'red');
    log(`‚úÖ index.html corrig√©: ${indexFixed ? 'Oui' : 'Non'}`, indexFixed ? 'green' : 'red');
    log(`‚úÖ _headers corrig√©: ${headersFixed ? 'Oui' : 'Non'}`, headersFixed ? 'green' : 'red');
    log(`‚úÖ netlify.toml corrig√©: ${netlifyFixed ? 'Oui' : 'Non'}`, netlifyFixed ? 'green' : 'red');
    log(`‚úÖ vite.config.ts corrig√©: ${viteFixed ? 'Oui' : 'Non'}`, viteFixed ? 'green' : 'red');
    log(`‚úÖ V√©rification: ${verificationOk ? 'R√©ussie' : '√âchou√©e'}`, verificationOk ? 'green' : 'red');

    if (redirectsFixed && indexFixed && headersFixed && netlifyFixed && viteFixed && verificationOk) {
      logSection('üéâ TOUS LES PROBL√àMES SSL CORRIG√âS');
      log('‚úÖ Configuration SSL simplifi√©e et optimis√©e', 'green');
      log('‚úÖ Headers de s√©curit√© moins restrictifs', 'green');
      log('‚úÖ Domaines corrig√©s dans index.html', 'green');
      log('‚úÖ Redirections SSL simplifi√©es', 'green');
      log('‚úÖ HTTPS d√©sactiv√© en d√©veloppement', 'green');
      
      log('\nüìã PROCHAINES √âTAPES:', 'yellow');
      log('1. Commitez les changements', 'blue');
      log('2. Poussez vers GitHub', 'blue');
      log('3. Attendez le red√©ploiement Netlify', 'blue');
      log('4. Testez toutes les pages', 'blue');
      
      log('\nüåê SITE AVEC SSL CORRIG√â:', 'yellow');
      log('   - https://cryptoboost.world', 'blue');
      log('   - Toutes les pages accessibles', 'blue');
      log('   - Aucune erreur SSL', 'blue');
    } else {
      logSection('‚ö†Ô∏è  PROBL√àMES DE CORRECTION');
      log('‚ùå Certains probl√®mes n\'ont pas pu √™tre corrig√©s', 'red');
      log('üí° V√©rifiez les permissions de fichiers', 'yellow');
    }

  } catch (error) {
    log('\n‚ùå Erreur lors de la correction', 'red');
    log(error.message, 'red');
  }
}

// Ex√©cution
fixAllSSLIssues().catch(console.error);