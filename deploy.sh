#!/bin/bash

# Script de d√©ploiement automatis√© pour CryptoBoost
# Usage: ./deploy.sh [environment]
# Environments: dev, staging, prod

set -e  # Exit on any error

# Configuration
ENVIRONMENT=${1:-dev}
BRANCH=""
NETLIFY_SITE_ID=""

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Configuration par environnement
case $ENVIRONMENT in
    "dev")
        BRANCH="development"
        info "D√©ploiement en d√©veloppement"
        ;;
    "staging")
        BRANCH="staging"
        info "D√©ploiement en staging"
        ;;
    "prod")
        BRANCH="main"
        info "D√©ploiement en production"
        ;;
    *)
        error "Environnement invalide. Utilisez: dev, staging, ou prod"
        ;;
esac

# V√©rifications pr√©alables
log "V√©rifications pr√©alables..."

# V√©rifier que Git est install√©
if ! command -v git &> /dev/null; then
    error "Git n'est pas install√©"
fi

# V√©rifier que Node.js est install√©
if ! command -v node &> /dev/null; then
    error "Node.js n'est pas install√©"
fi

# V√©rifier que npm est install√©
if ! command -v npm &> /dev/null; then
    error "npm n'est pas install√©"
fi

# V√©rifier la version de Node.js
NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt "18" ]; then
    error "Node.js version 18+ requis. Version actuelle: $(node --version)"
fi

log "‚úÖ Toutes les v√©rifications sont pass√©es"

# V√©rifier l'√©tat du repository
log "V√©rification de l'√©tat du repository Git..."

if [ -n "$(git status --porcelain)" ]; then
    warn "Des modifications non commit√©es ont √©t√© d√©tect√©es"
    git status --short
    read -p "Voulez-vous continuer? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error "D√©ploiement annul√©"
    fi
fi

# Changer de branche si n√©cessaire
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "$BRANCH" ]; then
    log "Changement vers la branche $BRANCH..."
    git checkout $BRANCH || error "Impossible de changer vers la branche $BRANCH"
fi

# Mettre √† jour la branche
log "Mise √† jour de la branche $BRANCH..."
git pull origin $BRANCH || warn "Impossible de faire git pull"

# Installation des d√©pendances
log "Installation des d√©pendances..."
if [ -f "package-lock.json" ]; then
    npm ci
else
    npm install
fi

# V√©rification des d√©pendances de s√©curit√©
log "Audit de s√©curit√© des d√©pendances..."
npm audit --audit-level moderate || warn "Vuln√©rabilit√©s d√©tect√©es dans les d√©pendances"

# Linting
log "V√©rification du code (linting)..."
npm run lint || warn "Probl√®mes de linting d√©tect√©s"

# Type checking
log "V√©rification des types TypeScript..."
npm run type-check || warn "Erreurs de types d√©tect√©es"

# Tests (si ils existent)
if npm run | grep -q "test"; then
    log "Ex√©cution des tests..."
    npm test || error "Les tests ont √©chou√©"
fi

# Build de l'application
log "Build de l'application..."
npm run build || error "Le build a √©chou√©"

# V√©rification que le dossier dist existe
if [ ! -d "dist" ]; then
    error "Le dossier dist n'a pas √©t√© cr√©√©"
fi

log "‚úÖ Build r√©ussi"

# V√©rification des variables d'environnement
log "V√©rification des variables d'environnement..."
if [ ! -f ".env" ]; then
    warn "Fichier .env non trouv√©"
    if [ ! -f ".env.example" ]; then
        warn "Fichier .env.example non trouv√© non plus"
    else
        info "Utilisez .env.example comme template pour cr√©er .env"
    fi
fi

# Analyse de la taille du bundle
log "Analyse de la taille du bundle..."
if command -v du &> /dev/null; then
    BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
    info "Taille du bundle: $BUNDLE_SIZE"
fi

# D√©ploiement
case $ENVIRONMENT in
    "dev"|"staging")
        log "D√©ploiement sur Netlify (preview)..."
        if command -v netlify &> /dev/null; then
            netlify deploy --dir=dist --message="Deploy from script - $ENVIRONMENT - $(date)"
        else
            warn "CLI Netlify non install√©. Installez avec: npm install -g netlify-cli"
            info "Vous pouvez d√©ployer manuellement en uploadant le dossier 'dist' sur Netlify"
        fi
        ;;
    "prod")
        log "D√©ploiement en production..."
        read -p "‚ö†Ô∏è  √ätes-vous s√ªr de vouloir d√©ployer en production? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if command -v netlify &> /dev/null; then
                netlify deploy --prod --dir=dist --message="Production deploy - $(date)"
            else
                warn "CLI Netlify non install√©"
                info "D√©ployez manuellement via l'interface Netlify ou installez le CLI"
            fi
        else
            info "D√©ploiement en production annul√©"
        fi
        ;;
esac

# Post-d√©ploiement
log "Nettoyage..."

# Optionnel: supprimer node_modules pour √©conomiser l'espace
read -p "Voulez-vous supprimer node_modules pour √©conomiser l'espace? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf node_modules
    log "node_modules supprim√©"
fi

log "üöÄ D√©ploiement termin√© pour l'environnement: $ENVIRONMENT"

# Informations utiles
echo
info "Prochaines √©tapes:"
case $ENVIRONMENT in
    "dev"|"staging")
        echo "- V√©rifiez le preview deploy dans l'interface Netlify"
        echo "- Testez les fonctionnalit√©s sur l'URL de preview"
        ;;
    "prod")
        echo "- V√©rifiez que le site est accessible sur votre domaine"
        echo "- Testez les fonctionnalit√©s critiques"
        echo "- Surveillez les logs et m√©triques"
        ;;
esac

echo "- Consultez les guides de d√©ploiement:"
echo "  * SUPABASE_DEPLOYMENT.md pour la base de donn√©es"
echo "  * NETLIFY_DEPLOYMENT.md pour l'h√©bergement"
echo